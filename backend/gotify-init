#! /bin/bash

#    Gotify backend for AstroPush, a simple push notification layer.
#    Copyright (C) 2022-2023  Matteo Piscitelli <matteo@matteopiscitelli.it>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Gotify backend initialization script

PYTHON=/usr/bin/python3

if [ -z "$1" ]; then
  echo "USAGE: $0 <filename> "
  echo
  echo "where <filename> is the filename to save generated configuration to."
  echo
  echo
  exit 1
fi

DCFG="$1"

# Test file writability
touch "$DCFG" || { echo "Failed writing to '$DCFG'. Cannot proceed."; exit 1; }

echo "Initializing Gotify backend."

BACKEND_DIR=$( realpath $( dirname $0 ) )

ICONS=$BACKEND_DIR/app-icons

echo "You must be running a Gotify service here on local host or somewhere on your network"
echo "to proceed with gotify backend setup. If you are not ready to proceed now, answer 'no':"
echo "when you're ready with a running Gotify service, you'll be able to complete the setup "
echo "resuming this procedure by running"
echo
echo "   $( realpath $0 ) "
echo
echo "Alternatively, you'll find a commented sample config file at "
echo
echo "   /usr/share/astropush/backends/gotify/backend.gotify.conf.sample"
echo
echo "You can move it to "
echo 
echo "   /etc/astropush/backend.gotify.conf "
echo 
echo "and manually tweak its content to suit your needs."
echo 
read -p "Proceed with installation (yes|no) ? " ans
echo

if [ "$ans" != "yes" ]; then
    echo "Exiting. Bye!"
    rm $DCFG
    exit 0
fi

API='http://localhost:8627'

echo "Please provide your running Gotify service complete api url: it usually is '$API',"
echo "if you're running Gotify service on this computer at default port and without any proxy."
read -p "Gotify service url (default: $API) ? " temp_api
echo

if [ "$temp_api" ]; then
    API="$temp_api"
fi

USER=
PWD=

echo "Please provide a valid username with administrative privileges on Gotify server"
read -p "Gotify administrator username? " temp_user
echo

if [ "$temp_user" ]; then
    USER="$temp_user"
else
    echo "Cannot procedd without Gotify administrator."
    rm $DCFG
    exit 0
fi

echo "Please provide the password for $USER Gotify user: "
echo "provided username and password won't be saved anywhere and"
echo "will be used only to generate the app token on Gotify server."
read -p "$USER password? " temp_pwd
echo

if [ "$temp_pwd" ]; then
    PWD="$temp_pwd"
else
    echo "Cannot procedd without administrator password."
    rm $DCFG
    exit 0
fi

json_extract() {
  $PYTHON -c "import sys, json; print(json.load(sys.stdin)['$1'])"
}

# add_application(clientToken, appName, appDescription, moduleName)
add_application() {
  app=$( curl --silent $API/application?token=$1 -F "name=$2" -F "description=$3" )
  appid=$( echo $app | json_extract id )
  apptoken=$( echo $app | json_extract token )
  curl --silent $API/application/$appid/image?token=$1 -F "id=$appid" -F "file=@$BACKEND_DIR/app-icons/$4.png" > /dev/null
  echo "$4=\"$apptoken\"" >> $DCFG
  echo -n "$2 "
}

echo -n "Login to Gotify service... "
# login and obtain client token
me=$( curl --silent --user ${USER}:${PWD} $API/client -F "name=gotify-init" )
myid=$( echo $me | json_extract id )
mytoken=$( echo $me | json_extract token )
echo "done."

cat <<- EOF > $DCFG

##########################################
# AstroPush Gotify backend configuration #
##########################################

api='$API'

EOF

echo -n "Creating applications... "

# add applications
add_application $mytoken OS "Operating System" os
add_application $mytoken KStars "KStars/Ekos astrophotography suite" kstars
add_application $mytoken Alignment "Ekos Alignment module" alignment
add_application $mytoken Capture "Ekos Capture module" capture
add_application $mytoken Focus "Ekos Focus module" focus
add_application $mytoken Guide "Ekos Guide module" guide
add_application $mytoken Mount "Ekos Mount module" mount
add_application $mytoken Scheduler "Ekos Scheduler module" scheduler

echo >> $DCFG

echo "Done."

echo -n "Logging out... " 
#remove client
#curl --silent -X DELETE $API/client/$myid?token=$mytoken > /dev/null
echo "done."
echo "Initialization completed: related configuration is in '$DCFG'."
echo
